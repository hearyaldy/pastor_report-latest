rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superAdmin'
      );
    }

    // Helper function to check if user is mission admin
    function isMissionAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'missionAdmin';
    }

    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user belongs to a specific mission
    function isMissionMember(missionName) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.mission == missionName;
    }

    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read any user (for displaying user lists)
      allow read: if isAuthenticated();

      // Users can create their own document (during registration)
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // Users can update their own document (except isAdmin field)
      allow update: if isOwner(userId) &&
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin']));

      // Only admins can update any user's isAdmin field
      allow update: if isAdmin();

      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Departments collection (legacy structure)
    match /departments/{departmentId} {
      // Anyone can read departments
      allow read: if true;

      // Only admins can create, update, or delete departments
      allow create, update, delete: if isAdmin();
    }
    
    // Missions collection (new mission-based structure)
    match /missions/{missionId} {
      // Allow anyone to read mission details (needed for registration page)
      allow read: if true;
      
      // Only admins can create, update, or delete missions
      allow create, update, delete: if isAdmin();
      
      // Function to get mission name from document
      function getMissionName() {
        return get(/databases/$(database)/documents/missions/$(missionId)).data.name;
      }
      
      // Departments subcollection within missions
      match /departments/{departmentId} {
        // Anyone can read mission departments
        allow read: if true;

        // Admins or mission members can create, update, or delete departments within their missions
        allow create, update, delete: if isAdmin() || isMissionMember(getMissionName());
        
        // Future enhancement: Mission-specific reports
        match /reports/{reportId} {
          // Anyone in the mission can read their mission's reports
          allow read: if isMissionMember(getMissionName()) || isAdmin();
          
          // Only mission members and admins can create reports for their mission
          allow create: if isMissionMember(getMissionName()) || isAdmin();
          
          // Only report creators and admins can update or delete reports
          allow update, delete: if isAdmin() || 
                               (isAuthenticated() && request.auth.uid == resource.data.createdBy);
        }
      }
    }

    // App settings collection (for global app configuration)
    match /settings/{settingId} {
      // Anyone authenticated can read settings
      allow read: if isAuthenticated();

      // Only admins can modify settings
      allow create, update, delete: if isAdmin();
    }

    // Staff collection (centralized staff directory)
    match /staff/{staffId} {
      // Allow read for anyone
      allow read: if true;

      // Allow write for all (temporary for initial setup)
      // TODO: Restrict to authenticated admins only
      allow create, update, delete: if true;
    }

    // Regions collection (organizational structure)
    match /regions/{regionId} {
      // Allow anyone to read regions (needed for registration page)
      allow read: if true;

      // Only admins can create, update, or delete regions
      allow create, update, delete: if isAdmin();
    }

    // Districts collection (organizational structure)
    match /districts/{districtId} {
      // Allow anyone to read districts (needed for registration page)
      allow read: if true;

      // Only admins can create, update, or delete districts
      allow create, update, delete: if isAdmin();
    }

    // Churches collection
    match /churches/{churchId} {
      // Anyone authenticated can read churches
      allow read: if isAuthenticated();

      // Authenticated users can create churches
      allow create: if isAuthenticated();

      // Users can update their own churches, admins can update any
      allow update: if isAuthenticated() &&
                       (resource.data.userId == request.auth.uid || isAdmin());

      // Only admins can delete churches
      allow delete: if isAdmin();
    }

    // Financial Reports collection
    match /financial_reports/{reportId} {
      // Anyone authenticated can read financial reports
      allow read: if isAuthenticated();

      // Authenticated users can create financial reports
      allow create: if isAuthenticated();

      // Users can update their own reports, admins can update any
      allow update: if isAuthenticated() &&
                       (resource.data.submittedBy == request.auth.uid || isAdmin());

      // Only admins can delete financial reports
      allow delete: if isAdmin();
    }
  }
}
