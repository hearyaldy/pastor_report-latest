rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superAdmin'
      );
    }

    // Helper function to check if user is mission admin
    function isMissionAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'missionAdmin';
    }

    // Helper function to check if user is a Mission President
    function isMissionPresident() {
      return isAuthenticated() &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Mission President' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'missionPresident');
    }

    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user belongs to a specific mission
    function isMissionMember(missionName) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.mission == missionName;
    }
    
    // Helper function to check if user is a Ministerial Secretary
    function isMinisterialSecretary() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ministerialSecretary';
    }
    
    // Helper function to check if user is an Officer
    function isOfficer() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'officer';
    }
    
    // Helper function to check if user is a Director
    function isDirector() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'director';
    }
    
    // Helper function to check if user is a Super Admin
    function isSuperAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superAdmin';
    }

    // Helper function to check if user is a District Pastor
    function isDistrictPastor() {
      return isAuthenticated() &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'District Pastor' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'districtPastor');
    }

    // Helper function to check if user is a Church Treasurer
    function isChurchTreasurer() {
      return isAuthenticated() &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Church Treasurer' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'churchTreasurer');
    }

    // Helper functions to get current user's district and mission IDs
    function userDistrictId() {
      return isAuthenticated()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.district
        : null;
    }

    function userMissionId() {
      return isAuthenticated()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.mission
        : null;
    }

    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read any user (for displaying user lists)
      allow read: if isAuthenticated();

      // Users can create their own document (during registration)
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // Users can update their own document (except isAdmin field)
      allow update: if isOwner(userId) &&
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin']));

      // Only admins can update any user's isAdmin field
      allow update: if isAdmin();

      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Departments collection (legacy structure)
    match /departments/{departmentId} {
      // Anyone can read departments
      allow read: if true;

      // Only admins can create, update, or delete departments
      allow create, update, delete: if isAdmin();
    }
    
    // Missions collection (new mission-based structure)
    match /missions/{missionId} {
      // Allow anyone to read mission details (needed for registration page)
      allow read: if true;
      
      // Only admins can create, update, or delete missions
      allow create, update, delete: if isAdmin();
      
      // Function to get mission name from document
      function getMissionName() {
        return get(/databases/$(database)/documents/missions/$(missionId)).data.name;
      }
      
      // Departments subcollection within missions
      match /departments/{departmentId} {
        // Anyone can read mission departments
        allow read: if true;

        // Admins or mission members can create, update, or delete departments within their missions
        allow create, update, delete: if isAdmin() || isMissionMember(getMissionName());
        
        // Future enhancement: Mission-specific reports
        match /reports/{reportId} {
          // Anyone in the mission can read their mission's reports
          allow read: if isMissionMember(getMissionName()) || isAdmin();
          
          // Only mission members and admins can create reports for their mission
          allow create: if isMissionMember(getMissionName()) || isAdmin();
          
          // Only report creators and admins can update or delete reports
          allow update, delete: if isAdmin() || 
                               (isAuthenticated() && request.auth.uid == resource.data.createdBy);
        }
      }
    }

    // App settings collection (for global app configuration)
    match /settings/{settingId} {
      // Anyone authenticated can read settings
      allow read: if isAuthenticated();

      // Only admins can modify settings
      allow create, update, delete: if isAdmin();
    }

    // Staff collection (centralized staff directory)
    match /staff/{staffId} {
      // Allow read for anyone
      allow read: if true;

      // Allow write for all (temporary for initial setup)
      // TODO: Restrict to authenticated admins only
      allow create, update, delete: if true;
    }

    // Regions collection (organizational structure)
    match /regions/{regionId} {
      // Allow anyone to read regions (needed for registration and onboarding)
      allow read: if true;

      // Authenticated users can create regions during onboarding
      allow create: if isAuthenticated() &&
                       request.resource.data.createdBy == request.auth.uid;

      // Users can update regions they created, admins can update any
      allow update: if isAuthenticated() &&
                       (resource.data.createdBy == request.auth.uid || isAdmin());

      // Admins and mission admins can delete regions
      allow delete: if isAdmin() || isMissionAdmin();
    }

    // Districts collection (organizational structure)
    match /districts/{districtId} {
      // Allow anyone to read districts (needed for registration and onboarding)
      // District pastors can read their own district
      allow read: if true || (isDistrictPastor() && resource.data.id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.district);

      // Authenticated users can create districts during onboarding
      allow create: if isAuthenticated() &&
                       request.resource.data.createdBy == request.auth.uid;

      // Users can update districts they created, admins can update any
      allow update: if isAuthenticated() &&
                       (resource.data.createdBy == request.auth.uid || isAdmin() || (isDistrictPastor() && resource.data.id == get(/databases/$(database)/documents/churches/$(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId)).data.districtId));

      // Admins and mission admins can delete districts
      allow delete: if isAdmin() || isMissionAdmin();
    }

    // Churches collection
    match /churches/{churchId} {
      // Allow authenticated users to read churches (needed for listings and assignments)
      allow read: if isAuthenticated();

      // Authenticated users can create churches if they are admin, mission admin, district pastor, or creating a church for themselves
      allow create: if isAuthenticated() && (
        isAdmin() ||
        isMissionAdmin() ||
        isDistrictPastor() ||
        request.resource.data.userId == request.auth.uid
      );

      // Users can update their own churches, admins, district pastors can update any church
      allow update: if isAuthenticated() &&
                       (resource.data.userId == request.auth.uid || isAdmin() || isDistrictPastor());

      // Admins and mission admins can delete churches
      allow delete: if isAdmin() || isMissionAdmin();
    }

    // Financial Reports collection
    match /financial_reports/{reportId} {
      // Allow reads for admins, mission admins, district pastors (their district/mission), church treasurers (their church), or the report submitter
      allow read: if isAuthenticated() &&
                     (isAdmin() || isMissionAdmin() || isDistrictPastor() ||
                      (isDistrictPastor() && resource.data.districtId == get(/databases/$(database)/documents/churches/$(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId)).data.districtId) ||
                      resource.data.churchId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId ||
                      resource.data.districtId == userDistrictId() ||
                      resource.data.missionId == userMissionId());
      // A user can list reports if they are authenticated and meet role-specific query conditions.
      allow list: if isAuthenticated() && (
        // Admins and mission admins can query broadly.
        isAdmin() ||
        isMissionAdmin() ||

        // Mission Presidents can query reports within their mission.
        (isMissionPresident() && request.query.missionId == userMissionId()) ||

        // District Pastors can query reports within their district, or for a church.
        (isDistrictPastor() && (request.query.districtId != null || request.query.churchId != null)) ||

        // Church Treasurers can only query for their own church.
        (isChurchTreasurer() && request.query.churchId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId)
      );
      // Allow creates for allowed roles within their scope
      allow create: if isAuthenticated() && (
        isAdmin() ||
        isMissionAdmin() ||
        (
          isDistrictPastor() && (
            request.resource.data.districtId == userDistrictId() ||
            (request.resource.data.missionId != null && request.resource.data.missionId == userMissionId())
          )
        ) ||
        (isChurchTreasurer() && request.resource.data.churchId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId)
      ) && request.resource.data.submittedBy == request.auth.uid;

      // Allow updates for report owner, admins, mission admins, district pastors (their district/mission), and treasurers (their church)
      allow update: if isAuthenticated() && (
        resource.data.submittedBy == request.auth.uid ||
        isAdmin() ||
        isMissionAdmin() ||
        (
          isDistrictPastor() && (
            resource.data.districtId == userDistrictId() ||
            (resource.data.missionId != null && resource.data.missionId == userMissionId())
          )
        ) ||
        (isChurchTreasurer() && resource.data.churchId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.churchId)
      );

      // Only admins can delete financial reports
      allow delete: if isAdmin();
    }

    // Borang B Reports (Monthly Ministerial Reports)
    match /borang_b_reports/{reportId} {
      // Allow list/get operations for different user types
      // - Superadmin/Admin, MinisterialSecretary, Officer, and Director can read all reports (list and get)
      // - Mission Admins can read reports for their own mission only
      // - Regular users can list/get their own reports (with userId query filter)
      
      // List permission - allows querying the collection
      // Regular users can list if they query with userId filter
      // Admins/Mission-level staff can list all without filter
      allow list: if isAuthenticated() && (
                     isAdmin() ||
                     isSuperAdmin() ||
                     isMinisterialSecretary() ||
                     isOfficer() ||
                     isDirector() ||
                     isMissionAdmin() ||
                     // Allow users to query their own reports
                     // Note: This relies on the query including a userId filter
                     request.auth != null
                   );
      
      // Get permission - allows reading individual documents
      allow get: if isAuthenticated() && (
                    resource.data.userId == request.auth.uid ||
                    isAdmin() ||
                    isSuperAdmin() ||
                    isMinisterialSecretary() ||
                    isOfficer() ||
                    isDirector() ||
                    (isMissionAdmin() &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.mission == resource.data.missionId)
                  );

      // Authenticated users can create their own reports
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid;

      // Users can update their own reports
      // Superadmin, MinisterialSecretary, Officer, and Director can update any report
      allow update: if isAuthenticated() &&
                      (resource.data.userId == request.auth.uid ||
                       isSuperAdmin() ||
                       isMinisterialSecretary() ||
                       isOfficer() ||
                       isDirector());

      // Users can delete their own reports
      // Superadmin, Admin, MinisterialSecretary, Officer, and Director can delete any reports
      allow delete: if isAuthenticated() &&
                      (resource.data.userId == request.auth.uid ||
                       isSuperAdmin() ||
                       isAdmin() ||
                       isMinisterialSecretary() ||
                       isOfficer() ||
                       isDirector());
    }

    // Admin Activity feed (used by Admin Dashboard Recent Activity)
    match /admin_activity/{activityId} {
      // Allow admins, mission admins, and district pastors to read recent activity
      allow read: if isAdmin() || isMissionAdmin() || isDistrictPastor();

      // Writes should be restricted; allow only admins to create/update/delete
      // Optionally, you can further restrict to Cloud Functions by checking request.auth.token.firebase.sign_in_provider
      allow create, update, delete: if isAdmin();
    }
  }
}
